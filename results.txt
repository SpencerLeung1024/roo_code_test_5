- openrouter/horizon-alpha > horizon_alpha
FREE, 5.86M
I gave up after it kept messing up board tile sizes further and further
It chose to use React.ts and Vite
Made a working Monopoly core gameplay loop
Movement, buying property, rent
No trade or mortgaging
Decided to implement its own rng.ts for some reason

- openrouter/horizon-beta > horizon_beta
FREE, 5.3M
It decided that all subtasks were implemented and completed the orchestrator task
It chose to use React.ts and Vite
Game is unplayable (unclosable modals)
Board is messed up
Also decided to implement its own rng.ts

- anthropic/claude-sonnet-4 > sonnet
$28.4, 29.5M
I gave up after it made no progress in moving players off GO in several turns
It chose to use Vue.js and Vite
Extremely thorough (wrote like 10 markdown docs at the beginning)
Never encountered an error in the log, just buggy behavior
Maybe the throughness and complexity of its plan killed it

- anthropic/claude-opus-4 > opus

- google/gemini-2.5-pro > gemini
$5.53, 6.41M
It decided that all subtasks were implemented and completed the orchestrator task
It chose to use no framework. Pure HTML, CSS, and JS
Made a working Monopoly core gameplay loop
Movement, buying property, rent
No trade or mortgaging
Player tokens are not visible

- x-ai/grok-4 > grok

- deepseek/deepseek-r1-0528 > deepseek_r1
$0.922, 1.9M
I gave up after 10 turns of it quitting halfway through its TODO list
It keeps forgetting to do the last items (almost as if it's in a rush?)
It chose to use no framework. Pure HTML, CSS, and JS
Game is unplayable (can't end your turn)
Undefined bugs everywhere

- deepseek/deepseek-chat-v3-0324 > deepseek_v3
$2.41, 6.41M
It decided that all subtasks were implemented and completed the orchestrator task
It chose to use Express.ts, React.ts, and Socket.IO
Game is unplayable (A white page that just says "Monopoly")
It will often complete debugging subtasks without waiting for human feedback

- qwen/qwen3-235b-a22b-thinking-2507 > qwen_thinking
$1.28, 10.3M
Using default routing was making it fail tool calls all the time
Provider set to Chutes. Still fails sometimes and has to be manually restarted
I gave up after it get stuck trying to work on game.js
It chose to use no framework. Pure HTML, CSS, and JS
Game is unplayable (can't end your turn)
It has difficulty using <apply_diff>
It will often complete debugging subtasks without waiting for human feedback

- qwen/qwen3-coder > qwen_coder
$6.82, 16.5M
I had to bad DeepInfra because the fp4 quantization destroyed the model's ability to use tool calls
It decided that all subtasks were implemented and completed the orchestrator task
It chose to use no framework. Pure HTML, CSS, and JS
Hardcoded and laid out with 2 players
Unlike Horizon Alpha, this model actually fixed board styling without deteriorating
The greens and blues side is still flipped though
Made a working Monopoly core gameplay loop
Movement, buying property, rent
No trade or mortgaging
You can bankrupt yourself with a tax since you can't mortgage an existing property

- moonshotai/kimi-k2 > kimi
$12.85, 20.28M
Preferred provider was set to Fireworks
I needed something with 131k context, isn't quantized weird, and isn't hammered like the official Moonshot AI API
With default routing, Roo Code will use 32k context (it checks the cheapest which is Chutes)
It decided that all subtasks were implemented and completed the orchestrator task
It chose to use no framework. Pure HTML, CSS, and JS
Like Deepseek R1, undefined bugs everywhere (how did Qwen Coder manage to do it with JS hell?)
Game is unplayable (Roll Dice does nothing)
Wrote a markdown doc and a HTML integration test at the end of each subtask
Rarely reads its own markdown again
Enjoys spamming .md and .html tests at top level in its folder
Rarely runs its own test or tells the user to open it in a browser to test
It has some tool use quirks
Seems to not understand that && and & don't work in PowerShell
Often fails <attempt_completion> twice before actually writing a result into it
Really enjoys pretending everything ran successfully and completing the task
Even if you tell it to wait for human feedback, it forgets within a few turns

- z-ai/glm-4.5 > glm
$3.6, 9.1M
It decided that all subtasks were implemented and completed the orchestrator task
It chose to use Express.js and Socket.IO
Game is unplayable (clicking "Start Game" never actually started the game)
It got tripped up and forgot which TODO items had been completed
It used a server and client architecture
